# -*- coding: utf-8 -*-
"""case_study2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QhI2ECw3UzQiDCFF3s4Eyuxp3W59_zG7
"""

import pandas as pd
!pip install chardet

import chardet

with open("/content/drive/MyDrive/DA a Long/Music_shop_v1.csv", "rb") as f:
    encoding = chardet.detect(f.read())["encoding"]

df = pd.read_csv("/content/drive/MyDrive/DA a Long/Music_shop_v1.csv", encoding=encoding)

df.head()

df.shape

df.nunique()

df.info()

df.describe()

df.columns

df[['ID']].value_counts()

# Assuming 'df' is your original DataFrame and 'ID' is the column with the duplicate values.
df= df.drop_duplicates(subset='ID', keep='first')

df.isnull().sum()

df['Name'].value_counts()

missing_data_rows = df[df.isnull().any(axis=1)].dropna(axis=0, how='any')
df = df.dropna()
df

df1 = df[['Loudness','Speechiness', 'Instrumentalness']]
df1

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X = scaler.fit_transform(df1.values)

X

from sklearn.cluster import KMeans

model = KMeans(n_clusters=3, random_state=42)
model.fit(X)

y = model.predict(X)

y

df1['Cluster_ID'] = y

df1

df1['Cluster_ID'].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt

cluster_gr = sns.pairplot(df1, hue='Cluster_ID')
plt.show()



"""Cluster 0:
loudness: medium
speechiness:highest
instrumentalness: varying but mostly low

Cluster 1:
loudness: highest
speechiness: low
instrumentalness: varying but mostly low

Cluster 2:
loudness: varying from low to high
speechiness: low
instrumentalness: varying but mostly high
"""

clusters = []
inertia_vals = []

for k in range(2,10,1):
  model = KMeans(n_clusters=k, random_state=42)
  model.fit(X)
  clusters.append(model)
  inertia_vals.append(model.inertia_)

plt.plot(range(2,10,1), inertia_vals, marker = "*")
plt.show()

from sklearn.metrics import silhouette_score
print(clusters[0])
print("Silhouette Score for k=2: ", silhouette_score(X, clusters[0].predict(X)))

print(clusters[1])
print("Silhouette Score for k=3: ", silhouette_score(X, clusters[1].predict(X)))

print(clusters[2])
print("Silhouette Score for k=4: ", silhouette_score(X, clusters[2].predict(X)))

df1

# prompt: Using dataframe df1:

# Create a scatter plot with Loudness on the x-axis and Speechiness on the y-axis, colored by Cluster_ID
import altair as alt
chart = alt.Chart(df1).mark_point().encode(
    x=alt.X('Loudness', title='Loudness'),
    y=alt.Y('Speechiness', title='Speechiness'),
    color=alt.Color('Cluster_ID:N', legend=alt.Legend(title='Cluster ID'))
).interactive()
chart